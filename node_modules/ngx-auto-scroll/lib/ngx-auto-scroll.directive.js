"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var NgxAutoScroll = (function () {
    function NgxAutoScroll(element) {
        this.lockYOffset = 10;
        this.observeAttributes = "false";
        this.isLocked = false;
        this.nativeElement = element.nativeElement;
    }
    NgxAutoScroll.prototype.getObserveAttributes = function () {
        return this.observeAttributes !== "" && this.observeAttributes.toLowerCase() !== "false";
    };
    NgxAutoScroll.prototype.ngAfterContentInit = function () {
        var _this = this;
        this.mutationObserver = new MutationObserver(function () {
            if (!_this.isLocked) {
                _this.scrollDown();
            }
        });
        this.mutationObserver.observe(this.nativeElement, {
            childList: true,
            subtree: true,
            attributes: this.getObserveAttributes(),
        });
    };
    NgxAutoScroll.prototype.ngOnDestroy = function () {
        this.mutationObserver.disconnect();
    };
    NgxAutoScroll.prototype.forceScrollDown = function () {
        this.scrollDown();
    };
    NgxAutoScroll.prototype.scrollDown = function () {
        this.nativeElement.scrollTop = this.nativeElement.scrollHeight;
    };
    NgxAutoScroll.prototype.scrollHandler = function () {
        var scrollFromBottom = this.nativeElement.scrollHeight - this.nativeElement.scrollTop - this.nativeElement.clientHeight;
        this.isLocked = scrollFromBottom > this.lockYOffset;
    };
    return NgxAutoScroll;
}());
__decorate([
    core_1.Input("lock-y-offset"),
    __metadata("design:type", Number)
], NgxAutoScroll.prototype, "lockYOffset", void 0);
__decorate([
    core_1.Input("observe-attributes"),
    __metadata("design:type", String)
], NgxAutoScroll.prototype, "observeAttributes", void 0);
__decorate([
    core_1.HostListener("scroll"),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], NgxAutoScroll.prototype, "scrollHandler", null);
NgxAutoScroll = __decorate([
    core_1.Directive({
        selector: "[ngx-auto-scroll]",
    }),
    __metadata("design:paramtypes", [core_1.ElementRef])
], NgxAutoScroll);
exports.NgxAutoScroll = NgxAutoScroll;
//# sourceMappingURL=ngx-auto-scroll.directive.js.map